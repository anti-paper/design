openapi: 3.0.0

info:
  title: Muscle APIs
  version: 0.0.0

servers:
  - url: https://{env}api-muscle-management.com/api
    variables:
      env:
        default: dev-
  - url: http://{host}:{port}/api
    variables:
      host:
        default: localhost
      port:
        default: '9000'

tags:
  - name: auth
  - name: users
  - name: logs
  - name: menus
  - name: times

paths:
  /auth/register:
    post:
      tags: [auth]
      requestBody:
        $ref: '#/components/requestBodies/register'
      responses:
        201:
          $ref: '#/components/responses/register'
  /auth/login:
    put:
      tags: [auth]
      requestBody:
        $ref: '#/components/requestBodies/register'
      responses:
        200:
          $ref: '#/components/responses/login'
  /auth/revival:
    put:
      tags: [auth]
      requestBody:
        $ref: '#/components/requestBodies/register'
      responses:
        200:
          $ref: '#/components/responses/revival'
  /auth/{id}/logout:
    delete:
      tags: [auth]
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/logout'
        401:
          $ref: '#/components/responses/unAuthorizedUser'
        404:
          $ref: '#/components/responses/ngUser'
  /auth/{id}/unregister:
    delete:
      tags: [auth]
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/unregister'
        401:
          $ref: '#/components/responses/unAuthorizedUser'
        404:
          $ref: '#/components/responses/ngUser'
  /users:
    get:
      tags: [users]
      responses:
        200:
          $ref: '#/components/responses/users'
  /users/{id}:
    get:
      tags: [users]
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/user'
        401:
          $ref: '#/components/responses/unAuthorizedUser'
        404:
          $ref: '#/components/responses/ngUser'
    put:
      tags: [users]
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/updateUser'
      responses:
        200:
          $ref: '#/components/responses/updatedUser'
        401:
          $ref: '#/components/responses/unAuthorizedUser'
        404:
          $ref: '#/components/responses/ngUser'
  /logs:
    get:
      tags: [logs]
      security:
        - Bearer: []
      responses:
        200:
          $ref: '#/components/responses/logs'

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
  parameters:
    userId:
      name: id
      in: path
      required: true
      schema:
        type: integer
  requestBodies:
    register:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: anti-paper
              password:
                type: string
                example: anti7450
    updateUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: tanaka
              password:
                type: string
                example: tanaka55
              method:
                type: integer
                example: 1
  responses:
    register:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: registered
              data:
                $ref: '#/components/schemas/registered'
              error:
                type: string
                example: ''
    login:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: login
              data:
                $ref: '#/components/schemas/registered'
              error:
                type: string
                example: ''
    revival:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: revival
              data:
                $ref: '#/components/schemas/registered'
              error:
                type: string
                example: ''
    logout:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: logout
              data:
                type: object
                example: ''
              error:
                type: string
                example: ''
    unregister:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: unregister
              data:
                type: object
                example: ''
              error:
                type: string
                example: ''
    users:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: got users
              data:
                $ref: '#/components/schemas/users'
              error:
                type: string
                example: ''
    user:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: got user
              data:
                $ref: '#/components/schemas/user'
              error:
                type: string
                example: ''
    updatedUser:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: updated user
              data:
                $ref: '#/components/schemas/updatedUser'
              error:
                type: string
                example: ''
    deletedUser:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: deleted user
              data:
                type: object
                example: ''
              error:
                type: string
                example: ''
    unAuthorizedUser:
      description: NG
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: ''
              data:
                type: object
                example: ''
              error:
                type: string
                example: 'unAuthorized'
    ngUser:
      description: NG
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: ''
              data:
                type: object
                example: ''
              error:
                type: string
                example: 'not found'
    logs:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: got logs
              data:
                $ref: '#/components/schemas/logs'
              error:
                type: string
                example: ''
  schemas:
    registered:
      type: object
      properties:
        id:
          type: integer
        method:
          type: integer
        token:
          type: string
      example:
        id: 1
        method: 0
        token: skdjgflskjdfdgkadhfkgahsdlfgdfkgjddlfkgjs;lkfdjhlksjdhfglhkjdfg;hlkdfghdjkfglhdfgdfgjsdjfglskjdfglksjhdflgjhsfghsdfhkjsdfkghskdfghsdfgssdkjfhkgsdf;lajsdlfgkjhgsldkgfnbkldfjghlsdflkbndfhksfdsdkfjhglksjdf;ghlkjdfglg;ksgfljhksrl;fdnjlgfkj;lhksfghdjfghkjdfg;h
    users:
      type: array
      items:
        properties:
          name:
            type: string
      example:
      - name: anti-paper
      - name: love-paper
    user:
      type: object
      properties:
        name:
          type: string
        password_length:
          type: integer
        method:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
        token:
          type: string
      example:
        name: anti-paper
        password_length: 8
        method: 0
        created_at: 2023-01-01
        updated_at: 2023-01-01
        token: skdjgflskjdfdgkadhfkgahsdlfgdfkgjddlfkgjs;lkfdjhlksjdhfglhkjdfg;hlkdfghdjkfglhdfgdfgjsdjfglskjdfglksjhdflgjhsfghsdfhkjsdfkghskdfghsdfgssdkjfhkgsdf;lajsdlfgkjhgsldkgfnbkldfjghlsdflkbndfhksfdsdkfjhglksjdf;ghlkjdfglg;ksgfljhksrl;fdnjlgfkj;lhksfghdjfghkjdfg;h
    updatedUser:
      type: object
      properties:
        token:
          type: string
      example:
        token: ksjadhkgadhfkjghsdfkghskdjfhgskjhdfgjkshdkjhbgskdjfkasdlfhgaisuhdgksndfkjghaksvnkshdfkausdgthbs ndfj,bhsdjkgfv dfjghsn,kdj.dflkgjnldkjfngjdnfgnsdk,jfhngk,sfdngkdfng,gnfgjhgnfd,gbndfgk,hndfdskjfhnkdljfngkjdfhkglsknflkghusdflkhndfgkgmsfgkjhdlsidfjhglndkfjgn
    logs:
      type: array
      items:
        properties:
          menu:
            type: string
          date:
            type: string
          times:
            type: integer
          token:
            type: string
      example:
      - menu: 腕立て伏せ
        date: 2023-01-01
        times: 50
        token: skdjgflskjdfdgkadhfkgahsdlfgdfkgjddlfkgjs;lkfdjhlksjdhfglhkjdfg;hlkdfghdjkfglhdfgdfgjsdjfglskjdfglksjhdflgjhsfghsdfhkjsdfkghskdfghsdfgssdkjfhkgsdf;lajsdlfgkjhgsldkgfnbkldfjghlsdflkbndfhksfdsdkfjhglksjdf;ghlkjdfglg;ksgfljhksrl;fdnjlgfkj;lhksfghdjfghkjdfg;h
      - menu: 腹筋
        date: 2023-01-02
        times: 50
        token: ksjadhkgadhfkjghsdfkghskdjfhgskjhdfgjkshdkjhbgskdjfkasdlfhgaisuhdgksndfkjghaksvnkshdfkausdgthbs ndfj,bhsdjkgfv dfjghsn,kdj.dflkgjnldkjfngjdnfgnsdk,jfhngk,sfdngkdfng,gnfgjhgnfd,gbndfgk,hndfdskjfhnkdljfngkjdfhkglsknflkghusdflkhndfgkgmsfgkjhdlsidfjhglndkfjgn
